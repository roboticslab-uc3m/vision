/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Apr 17 19:21:21 2025


#ifndef DNNDETECTOR_PARAMSPARSER_H
#define DNNDETECTOR_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class DnnDetector.
*
* These are the used parameters:
* | Group name | Parameter name      | Type   | Units | Default Value                   | Required | Description                       | Notes                 |
* |:----------:|:-------------------:|:------:|:-----:|:-------------------------------:|:--------:|:---------------------------------:|:---------------------:|
* | -          | trainedModel        | string | -     | yolov3-tiny/yolov3-tiny.weights | 0        | trained model file                | -                     |
* | -          | configDNNModel      | string | -     | yolov3-tiny/yolov3-tiny.cfg     | 0        | configuration file                | -                     |
* | -          | framework           | string | -     | darknet                         | 0        | framework                         | -                     |
* | -          | classesTrainedModel | string | -     | coco-object-categories.txt      | 0        | file with trained classes         | -                     |
* | -          | backend             | string | -     | cuda                            | 0        | backend                           | default, opencv, cuda |
* | -          | target              | string | -     | cpu                             | 0        | target device                     | cpu, opencl, cuda     |
* | -          | scale               | float  | -     | 0.00392                         | 0        | scale                             | -                     |
* | -          | mean                | double | -     | 0.0                             | 0        | mean                              | -                     |
* | -          | confThreshold       | float  | -     | 0.1                             | 0        | confidence threshold              | -                     |
* | -          | nmsThreshold        | float  | -     | 0.4                             | 0        | non maximum suppression threshold | -                     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device DnnDetector --trainedModel yolov3-tiny/yolov3-tiny.weights --configDNNModel yolov3-tiny/yolov3-tiny.cfg --framework darknet --classesTrainedModel coco-object-categories.txt --backend cuda --target cpu --scale 0.00392 --mean 0.0 --confThreshold 0.1 --nmsThreshold 0.4
* \endcode
*
* \code{.unparsed}
* yarpdev --device DnnDetector
* \endcode
*
*/

class DnnDetector_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    DnnDetector_ParamsParser();
    ~DnnDetector_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"DnnDetector"};
    const std::string m_device_name = {"DnnDetector"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_trainedModel_defaultValue = {"yolov3-tiny/yolov3-tiny.weights"};
    const std::string m_configDNNModel_defaultValue = {"yolov3-tiny/yolov3-tiny.cfg"};
    const std::string m_framework_defaultValue = {"darknet"};
    const std::string m_classesTrainedModel_defaultValue = {"coco-object-categories.txt"};
    const std::string m_backend_defaultValue = {"cuda"};
    const std::string m_target_defaultValue = {"cpu"};
    const std::string m_scale_defaultValue = {"0.00392"};
    const std::string m_mean_defaultValue = {"0.0"};
    const std::string m_confThreshold_defaultValue = {"0.1"};
    const std::string m_nmsThreshold_defaultValue = {"0.4"};

    std::string m_trainedModel = {"yolov3-tiny/yolov3-tiny.weights"};
    std::string m_configDNNModel = {"yolov3-tiny/yolov3-tiny.cfg"};
    std::string m_framework = {"darknet"};
    std::string m_classesTrainedModel = {"coco-object-categories.txt"};
    std::string m_backend = {"cuda"};
    std::string m_target = {"cpu"};
    float m_scale = {0.00392};
    double m_mean = {0.0};
    float m_confThreshold = {0.1};
    float m_nmsThreshold = {0.4};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
