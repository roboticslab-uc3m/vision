/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Apr 17 19:21:21 2025


#ifndef ARUCODETECTOR_PARAMSPARSER_H
#define ARUCODETECTOR_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class ArucoDetector.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value  | Required | Description       | Notes                                        |
* |:----------:|:--------------:|:------:|:-----:|:--------------:|:--------:|:-----------------:|:--------------------------------------------:|
* | -          | aruco_size     | string | -     | ARUCO_ORIGINAL | 0        | ArUco code format | 4X4_1000, ARUCO_ORIGINAL, 6X6_1000, 7X7_1000 |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device ArucoDetector --aruco_size ARUCO_ORIGINAL
* \endcode
*
* \code{.unparsed}
* yarpdev --device ArucoDetector
* \endcode
*
*/

class ArucoDetector_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    ArucoDetector_ParamsParser();
    ~ArucoDetector_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"ArucoDetector"};
    const std::string m_device_name = {"ArucoDetector"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_aruco_size_defaultValue = {"ARUCO_ORIGINAL"};

    std::string m_aruco_size = {"ARUCO_ORIGINAL"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
